---
# Source: argo/templates/workflow-controller-config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argo-workflow-controller-configmap
  namespace: argo
data:
  config: |
    artifactRepository:
    metricsConfig:
      enabled: true
      path: /metrics
      port: 8080
---
# Source: argo/templates/ui-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-ui
  namespace: argo
---
# Source: argo/templates/workflow-controller-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo
  namespace: argo
---
# Source: argo/templates/ui-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-ui-cluster-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - get
  - list
  - watch
---
# Source: argo/templates/workflow-controller-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-workflow-controller-cluster-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - delete
---
# Source: argo/templates/ui-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-ui-crb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-ui-cluster-role
subjects:
- kind: ServiceAccount
  name: argo-ui
  namespace: argo
---
# Source: argo/templates/workflow-controller-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-workflow-controller-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-workflow-controller-cluster-role
subjects:
  - kind: ServiceAccount
    name: argo
    namespace: argo
  - kind: ServiceAccount
    name: argo
    namespace: default
---
# Source: argo/templates/ui-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argo-ui
  namespace: argo
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8001
  selector:
    app: argo-ui
  sessionAffinity: None
  type: ClusterIP
---
# Source: argo/templates/ui-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-ui
  namespace: argo
  labels:
    app: argo-ui
spec:
  selector:
    matchLabels:
      app: argo-ui
  replicas: 1
  template:
    metadata:
      labels:
        app: argo-ui
    spec:
      serviceAccountName: "argo-ui"
      containers:
        - name: ui
          image: "argoproj/argoui:v2.3.0"
          imagePullPolicy: Always
          env:
          - name: FORCE_NAMESPACE_ISOLATION
            value: "true"
          - name: IN_CLUSTER
            value: "true"
          - name: ARGO_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: BASE_HREF
            value: /
---
# Source: argo/templates/workflow-controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-workflow-controller
  namespace: argo
  labels:
    app: argo-workflow-controller
spec:
  selector:
    matchLabels:
      app: argo-workflow-controller
  replicas: 1
  template:
    metadata:
      labels:
        app: argo-workflow-controller
    spec:
      serviceAccountName: "argo"
      containers:
        - name: controller
          image: "argoproj/workflow-controller:v2.3.0"
          imagePullPolicy: Always
          command: [ "workflow-controller" ]
          args:
          - "--configmap"
          - "argo-workflow-controller-configmap"
          - "--executor-image"
          - "argoproj/argoexec:v2.3.0"
          - "--loglevel"
          - "info"
          - "--gloglevel"
          - "0"
          env:
          - name: ARGO_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
---
{{- if .Values.argo.ingress.enabled -}}
{{- if and .Values.argo.ingress.className (not (semverCompare ">=1.18-0" .Capabilities.KubeVersion.GitVersion)) }}
  {{- if not (hasKey .Values.argo.ingress.annotations "kubernetes.io/ingress.class") }}
  {{- $_ := set .Values.argo.ingress.annotations "kubernetes.io/ingress.class" .Values.argo.ingress.className}}
  {{- end }}
{{- end }}
{{- if semverCompare ">=1.19-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: networking.k8s.io/v1
{{- else if semverCompare ">=1.14-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: networking.k8s.io/v1beta1
{{- else -}}
apiVersion: extensions/v1beta1
{{- end }}
kind: Ingress
metadata:
  name: argo-ui
  namespace: argo
  {{- with .Values.argo.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  rules:
    {{- range .Values.argo.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            {{- if and .pathType (semverCompare ">=1.18-0" $.Capabilities.KubeVersion.GitVersion) }}
            pathType: {{ .pathType }}
            {{- end }}
            backend:
              {{- if semverCompare ">=1.19-0" $.Capabilities.KubeVersion.GitVersion }}
              service:
                name: argo-ui
                port:
                  number: 80
              {{- else }}
              serviceName: argo-ui
              servicePort: 80
              {{- end }}
          {{- end }}
    {{- end }}
  tls:
    {{- range .Values.argo.ingress.tls }}
    - hosts:
        {{- range .hosts }}
        - {{ . | quote }}
        {{- end }}
      secretName: {{ .secretName }}
    {{- end }}
{{- end }}
