# ----------------------------------------------
# GLOBAL ---------------------------------------
# ----------------------------------------------
global:
  id_rsa: |
    PLACEHOLDER
  id_rsa_pub: |
    PLACEHOLDER
  known_hosts: |
    PLACEHOLDER
  google_service_account: |
    PLACEHOLDER

# ----------------------------------------------
# API ------------------------------------------
# ----------------------------------------------
bolt-api:
  environment:
    BUCKET_PRIVATE_STORAGE: ""
    BUCKET_PUBLIC_UPLOADS: ""
    CONFIG_VERSION: ""
    HASURA_GQL: ""
    HCE_DEBUG: ""
    JWT_ALGORITHM: ""
    KEYCLOAK_CLIENT_ID: ""
    KEYCLOAK_REALM_NAME: ""
    KEYCLOAK_URL: ""
    UPLOADS_PUBSUB_SUBSCRIPTION: ""

  secrets: |
    GOOGLE_APPLICATION_CREDENTIALS = ""
    HASURA_GRAPHQL_ACCESS_KEY = ""
    KEYCLOAK_CLIENT_SECRET = ""
    KEYCLOAK_SECRET_KEY = ""
    SECRETS_VERSION = ""
    SENTRY_DSN = ""

  replicaCount: 2
  image:
    repository: eu.gcr.io/acai-bolt/bolt-api
    tag: latest
  nodeSelector:
    group: default
  resources:
    requests:
      cpu: 200m
      memory: 400Mi
    limits:
      cpu: 300m
      memory: 512Mi

# ----------------------------------------------
# PORTAL ---------------------------------------
# ----------------------------------------------
bolt-portal:
  replicaCount: 2

  image:
    repository: eu.gcr.io/acai-bolt/bolt-portal
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: latest

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/tls-acme: "true"
    hosts:
      - host: example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: chart-example-tls
        hosts:
          - example.com

  resources:
    requests:
      cpu: 200m
      memory: 400Mi
    limits:
      cpu: 300m
      memory: 512Mi

# ----------------------------------------------
# WORKFLOW -------------------------------------
# ----------------------------------------------
bolt-worfkflow:
  # ----------------------------------------------
  # CREATOR --------------------------------------
  # ----------------------------------------------
  creator:
    replicaCount: 1

    # The service creates argoproj.io/v1alpha1 Workflows
    # This helm chart will create cluster role and bind it to given namespace
    # so the app will be able to create Workflow resource in this namespace.
    argoNamespace: argo

    image:
      repository: eu.gcr.io/acai-bolt/workflow-creator
      tag: latest
      pullPolicy: Always

  # ----------------------------------------------
  # TERMINATOR -----------------------------------
  # ----------------------------------------------
  terminator:
    replicaCount: 1

    image:
      repository: eu.gcr.io/acai-bolt/bolt-workflow-termiantor
      tag: stable
      pullPolicy: IfNotPresent

# ----------------------------------------------
# ARGO WORKFLOWS -------------------------------
# ----------------------------------------------
argo:
  ingress:
    enabled: true
    className: ""
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/tls-acme: "true"
    hosts:
      - host: example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: chart-example-tls
        hosts:
          - example.com

# ----------------------------------------------
# HASURA ---------------------------------------
# ----------------------------------------------
hasura:
  environment:
    HASURA_GRAPHQL_DATABASE_URL: ""
    HASURA_GRAPHQL_ACCESS_KEY: ""
    HASURA_GRAPHQL_JWT_SECRET: ""
    HASURA_GRAPHQL_DEV_MODE: "true"
  ingress:
    enabled: true
    className: ""
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      kubernetes.io/tls-acme: 'true'
      nginx.ingress.kubernetes.io/tls-acme: 'true'
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "240"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "240"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "240"
      hosts:
        - host: example.com
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: chart-example-tls
          hosts:
          - example.com

# ----------------------------------------------
# INGRESS-NGINX --------------------------------
# ----------------------------------------------
ingress-nginx:
  defaultBackend:
    enabled: false
  controller:
    service:
      externalTrafficPolicy: Local
    metrics:
      enabled: true
    config:
      upstream-keepalive-timeout: "240"
    resources:
      requests:
        cpu: 300m
        memory: 400Mi
      limits:
        cpu: 400m
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
