# ----------------------------------------------
# GLOBAL ---------------------------------------
# ----------------------------------------------
global:
  id_rsa: |
    PLACEHOLDER
  id_rsa_pub: |
    PLACEHOLDER
  known_hosts: |
    PLACEHOLDER
  google_service_account: |
    PLACEHOLDER

# ----------------------------------------------
# API ------------------------------------------
# ----------------------------------------------
bolt-api:
  environment:
    CONFIG_VERSION: "PLACEHOLDER"
    HASURA_GQL: "PLACEHOLDER"
    HCE_DEBUG: "PLACEHOLDER"
    JWT_ALGORITHM: "PLACEHOLDER"
    JWT_VALID_PERIOD: PLACEHOLDER

  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: 'true'
      nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/proxy-connect-timeout: '240'
      nginx.ingress.kubernetes.io/proxy-read-timeout: '240'
      nginx.ingress.kubernetes.io/proxy-send-timeout: '240'
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/tls-acme: 'true'
    hosts:
      - host: PLACEHOLDER
        paths:
          - path: /auth/
            pathType: Prefix
          - path: /static/
            pathType: Prefix
    tls:
      - secretName: PLACEHOLDER
        hosts:
          - PLACEHOLDER

  secrets: |
    GOOGLE_APPLICATION_CREDENTIALS = "PLACEHOLDER"
    HASURA_GRAPHQL_ACCESS_KEY = "PLACEHOLDER"
    SECRETS_VERSION = "PLACEHOLDER"
    SECRET_KEY = "PLACEHOLDER"
    AUTH_LOGIN = "PLACEHOLDER"
    AUTH_PASSWORD = "PLACEHOLDER"
    JWT_AUTH_PUB_KEY = "PLACEHOLDER"
    JWT_AUTH_PRIV_KEY = "PLACEHOLDER"

  replicaCount: 2
  resources:
    requests:
      cpu: 200m
      memory: 400Mi
    limits:
      cpu: 300m
      memory: 512Mi

# ----------------------------------------------
# PORTAL ---------------------------------------
# ----------------------------------------------
bolt-portal:
  replicaCount: 2

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/tls-acme: "true"
    hosts:
      - host: PLACEHOLDER
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: PLACEHOLDER
        hosts:
          - PLACEHOLDER

  resources:
    requests:
      cpu: 200m
      memory: 400Mi
    limits:
      cpu: 300m
      memory: 512Mi

# ----------------------------------------------
# WORKFLOW -------------------------------------
# ----------------------------------------------
bolt-worfkflow:
  # ----------------------------------------------
  # CREATOR --------------------------------------
  # ----------------------------------------------
  creator:
    replicaCount: 1

    # The service creates argoproj.io/v1alpha1 Workflows
    # This helm chart will create cluster role and bind it to given namespace
    # so the app will be able to create Workflow resource in this namespace.
    argoNamespace: argo

  # ----------------------------------------------
  # TERMINATOR -----------------------------------
  # ----------------------------------------------
  terminator:
    replicaCount: 1

# ----------------------------------------------
# ARGO WORKFLOWS -------------------------------
# ----------------------------------------------
argo:
  ingress:
    enabled: true
    className: ""
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/tls-acme: "true"
    hosts:
      - host: PLACEHOLDER
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: PLACEHOLDER
        hosts:
          - PLACEHOLDER

# ----------------------------------------------
# HASURA ---------------------------------------
# ----------------------------------------------
hasura:
  environment:
    HASURA_GRAPHQL_DATABASE_URL: "PLACEHOLDER"
    HASURA_GRAPHQL_ACCESS_KEY: "PLACEHOLDER"
    HASURA_GRAPHQL_JWT_SECRET: "PLACEHOLDER"
    HASURA_GRAPHQL_DEV_MODE: "true"
  ingress:
    enabled: true
    className: ""
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      kubernetes.io/tls-acme: 'true'
      nginx.ingress.kubernetes.io/tls-acme: 'true'
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "240"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "240"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "240"
    hosts:
      - host: PLACEHOLDER
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: PLACEHOLDER
        hosts:
        - PLACEHOLDER

# ----------------------------------------------
# INGRESS-NGINX --------------------------------
# ----------------------------------------------
ingress-nginx:
  defaultBackend:
    enabled: false
  controller:
    service:
      externalTrafficPolicy: Local
    metrics:
      enabled: true
    config:
      upstream-keepalive-timeout: "240"
    resources:
      requests:
        cpu: 300m
        memory: 400Mi
      limits:
        cpu: 400m
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80

# ----------------------------------------------
# CERT-MANAGER ---------------------------------
# ----------------------------------------------
cert-manager:
  installCRDs: true

cluster-issuer:
  enabled: true
  spec:
    acme:
      email: PLACEHOLDER
      solvers: 
      - http01:
          ingress:
            class: nginx
      privateKeySecretRef:
        name: letsencrypt-prod
      server: https://acme-v02.api.letsencrypt.org/directory
